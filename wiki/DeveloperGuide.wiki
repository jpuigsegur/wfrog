#summary Developing and extending wrog

<p align="center"><img src="http://wfrog.googlecode.com/svn/wiki/images/logo-web.png"/></p>

<wiki:toc/>

== Writing a station driver ==

=== The `Station` interface ==

A station class must implement the following method:
{{{
   def run(self, generate_event, send_event)
}}}

The station class is responsible of connecting to the station, managing its own loop and issuing events via the `generate_event` and `send_event` callbacks.

Notes: It must have a class comment to be documented in the -H help.

=== Events ===

Event objects are constructed using the `generate_event` callback. The only parameter is the type of the event (temp, hum, ...) as in the [http://www.westep.org WESTEP] specification.

For structured events, use the `create_child` method.

=== Example ===

This is an example behaving like the simulator station provided in wfrog. It illustrate how to create events and send them.

{{{
import time
import random
import copy


def detect():
    return MyStation()

name = "My Station"


class MyStation(object):

    '''
    Simulates a station. Issues events randomly with random variations.
    '''

    debug_station = True

    types = [ 'temp', 'press', 'hum', 'rain', 'wind', 'uv', 'rad' ]
    init_values = [ 10, 1020, 65, 10, [ 3, 180], 1, 2 ]
    range = [ 30, 100, 40, 20, [6, 360], 5, 4 ]

    rain_total = 55

    def new_value(self, current, init, range):
        step = random.random()*(range/8.0) - range/16.0
        dev = current-init # deviation from init
        delta = round(step-dev/16.0,1) # encourage keeping around init
        new = current + delta
        # keep in range
        if new < init -range/2.0:
            new = init - range/2.0
        if new > init + range/2.0:
            new = init + range/2.0
        return new

    def run(self, generate_event, send_event):
        current_values = copy.copy(self.init_values)

        while True:
            t = random.randint(0,len(self.types)-1)
            type = self.types[t]
            e = generate_event(type)

            if type == 'temp' or type=='hum':
                e.sensor = random.randint(0,1)
            if type == 'wind':
                current_values[t][0] = self.new_value(current_values[t][0], self.init_values[t][0], self.range[t][0])
                current_values[t][1] = self.new_value(current_values[t][1], self.init_values[t][1], self.range[t][1])
                e.create_child('mean')
                e.mean.speed=current_values[t][0]
                e.mean.dir=current_values[t][1]
                e.create_child('gust')
                e.gust.speed=current_values[t][0] + random.randint(0,2)
                e.gust.dir=current_values[t][1]
            else:
                current_values[t] = self.new_value(current_values[t], self.init_values[t], self.range[t])
                if type == 'rain':
                    e.rate = current_values[t]
                    e.total = self.rain_total
                    self.rain_total = self.rain_total + random.randint(0,2)
                elif type == 'uv':
                    e.value = abs(int(current_values[t]))
                else:
                    e.value = current_values[t]

            send_event(e)
            time.sleep(2)
}}}

=== Making it configurable in yaml files ===

To make it usable in the wfdriver configuration, declare the following class (typically in the `__init__.py` file):

{{{
class YamlMyStation(mystation.MyStation, yaml.YAMLObject):
    yaml_tag = u'!mystation'
}}}

=== Auto-detect feature ===

You can enable auto-detect for your station, e.g. based on USB vendor/product ids.

The station class must be alone in its python module and the following defined at module level:

{{{
def detect():
}}}
Must return a station object or None if not detected.

{{{
name
}}}
Contains the name displayed by the auto-detect code.

You need then to register it into the the auto-detect list (typically in the `__init__.py` file):

{{{
auto.stations.append(mystation)
}}}

=== Packaging outside of wfrog ===




<p align="right"><img src="http://wfrog.googlecode.com/svn/wiki/images/small-frog.png"/></p>