#summary Editing the configuration to adapt wfrog to your needs.

<p align="center"><img src="http://wfrog.googlecode.com/svn/wiki/images/logo-web.png"/></p>

<wiki:toc/>

==Architecture==

The wfrog architecture involves three functional modules:

   # The Driver. Reads data from the connected station and sends it to the logger as events.
   # The Logger. Logs data into a persistent storage (default is CSV file). It also maintains a XML file with the latest current conditions.
   # The Renderer. Reads data from the database and/or the XML file and renders it on a web page, either served by an internal web server or sent on a FTP site.

{{{
          +--------------+             +--------------+
          |   Station    |             |   Browser    |
          +--------------+             +--------------+
                 |                            ^     ^
                 |                            |     |
          +--------------+                    |     |
          |              |                    |     |
          |   wfdriver   |                    |   +--------------+
          |              |                    |   |   FTP site   |
          +--------------+                    |   +--------------+
                 |                            |       ^
                 | events                     |       |
                 |                            |  HTML |
                 v                            |       |
          +--------------+                +-----------+--+
          |              |                |              |
          |   wflogger   |                |   wfrender   |
          |              |                |              |
          +--------------+                +--------------+
                 |                               ^
                 |         ,-----------.         |
         samples |        (             )        | samples
                 |        |`-----------'|        |
                 +------->|             |--------+
                          |   Storage   |
                          |             |
                           `-----------'
}}}

Note: a common module named `wfcommon` provides the infrastructure shared by the functional modules (storage, units, ...).

== Running the modules in separate processes ==

=== Backend and Renderer ===

Without parameters, the `wfrog` command runs all modules in the same process.
  * To run the backend (i.e. driver+logger) only: `wfrog --backend`
  * To run the renderer only: `wfrog --renderer`

=== Logger and Driver ===

You can also separate the driver and logger, although it does not makes lot of sense except if you use an external WESTEP driver or use wfrog as a WESTEP driver sending events to another software.

*Using an external WESTEP driver*

Configure wflogger to use a `!stdio-in` or a `!http-in` input. Then run the logger directly with `wflogger/wflogger.py`.

*Using wfrog as WESTEP driver*

Configure wfdriver to use a`!stdio-out` or a `!http-out` output. Then run the driver directly with `wfdriver/wfdriver.py`.

== Preparing the customization ==

In order not to modify directly the configuration in the wfrog distribution (that would be overwritten when upgrading to a new version, for example), run the following command to prepare your custom configuration:

{{{
sudo wfrog --customize
}}}

This will prepare the custom configuration under `/etc/wfrog/` by copying the factory default configuration. If not run as root, it will be prepared under `~/.wfrog`.

When a configuration is available at this location, it will be used instead of the factory configuration. It is your custom configuration that you modify.

*Caution*: Once you have customized your configuration, the config directory of the wfrog installation will not be used anymore. Remember that, especially when you upgrade wfrog because it will not update the customized configuration.

== Configuring the station driver ==

=== Specifying your station model ==

If your station is not listed as capable of auto-detect in SupportedStations, you will need to configure the correct driver:

  * Be sure to have [http://code.google.com/p/wfrog/wiki/CustomizationGuide?ts=1283113562&updated=CustomizationGuide#Preparing_the_customization prepared your custom configuration] 
  * Modify the file `wfdriver/config/embedded.yaml`:
    * Comment out the `station: !auto` line.
    * Add the line `station; !xxxx`. Where `!xxx` is the driver listed in SupportedStations.

== Configuring the renderer ==

=== Serve static files with HTTP renderer

To make the HTTP render serve other files (e.g. generataed webcam images), simply add to =wfrender/config/embedded.yaml= (or =wfrender.yaml= if renderer running alone) the =static= property defining the URL path under which you want the files served and the =docroot= property pointing to the filesystem directory. Example:

{{{
renderer: !http
    cookies: [ units ]
    root: !include
        path: default/24hours.yaml
    renderers:
        3hours.html: !include
            path: default/3hours.yaml
        24hours.html: !include
            path: default/24hours.yaml
        30days.html: !include
            path: default/30days.yaml
        365days.html: !include
            path: default/365days.yaml
        check: !include
            path: default/check.yaml
    static: test
    docroot: /home/user/webcam
}}}

=== Make wfrog be reloaded on configuration change ===

This trick allows for avoiding to restart wfrog manually while editing configuration and templates.

  * Install dnotify:
    * `sudo apt-get install dnotify`
  * `dnotify -r -M ~/.wfrog/wfrender -e sh -c "killall wfrog; bin/wfrog -R -d &"`

This will monitor the directory `/.wfrog/wfrender` and restart wfrog each time a file is modified in this directory.

== Using a database storage instead of a CSV file ==
=== Firebird ===
==== Needed dependencies ====

{{{
sudo apt-get install firebird2.0-super    #  Firebird database 2.0 
}}}

==== Start Database Server ====

{{{
sudo mkdir -p /var/run/firebird/2.0
sudo dpkg-reconfigure firebird2.0-super
}}}

==== Create Database and Tables ====

{{{
sudo mkdir /var/lib/firebird/2.0/data
cd database
isql-fb -u sysdba -p masterkey
SQL> create database 'localhost:/var/lib/firebird/2.0/data/wfrog.db';
SQL> IN db-firebird-0.2.sql;
}}}

==== Configure the Storage ====

  * Edit `wfcommon/config/storage.yaml` to enable the `!firebird` storage.


=== Mysql ===
==== Needed dependencies ====

{{{
sudo apt-get install python-mysqldb    #  Mysql Python driver 
}}}

mysql server should be installed and started in the system (or another available system)
TODO: specify how to install and setup mysql if necessary

==== Create Database and Tables ====

{{{
cd database
mysql --user=root --password=secret
SQL> create database wfrog;
SQL> exit
mysql --user=root --password=secret --database=wfrog < db-mysql-0.3.sql
}}}

==== Configure the Storage ====

  * Edit `wfcommon/config/storage.yaml` to enable the `!mysql` storage.

== Install as a Boot-Time Services ==

Steps to make wfrog start and stop automatically on a debian-based system:

  * Only for non-debian installations: Make links to the daemon scripts. Adapt the target path to your wfrog directory.
{{{
cd /etc/init.d/
sudo ln -s /opt/wfrog/init.d/wfrender 
sudo ln -s /opt/wfrog/init.d/wflogger 
}}}
  * Make these scripts be called by the system (as root)<br>
Debian:
{{{
sudo update-rc.d wfrender defaults 99
sudo update-rc.d wflogger defaults 99
}}}
Fedora/RedHat:
{{{
sudo chkconfig httpd --add
sudo chkconfig  httpd  on --level 2,3,5
}}}

== Sending pages to a FTP server ==

The default configuration starts an internal web-server on port 7680.

To send the generated page periodically to a FTP site instead of serving it in the internal web-server, replace the following part of the configuration file:

{{{
renderer: !http
    root: !template
}}}

with 

{{{
renderer: !scheduler
    period: 120  # in seconds
    renderer: !ftp
        host: myhost.mydomain.com            # where to send the file
        username: myusername
        password: mypassword
        renderers:
            wfrender.html: !file             # The remote filename
                path: /tmp/wfrender.html     # The local one
                renderer: !template         
}}}

And indent the configuration below so that it is one level below the `render: !template` line.

== Getting Help ==

See the [http://www.windmaster.ch/wfrog/doc Configuration Reference] for details on configuration elements.

The configuration reference is also available in the builtin help of each module, e.g.:

{{{
wfdriver/wfdriver.py --help             # General help
wfdriver/wfdriver.py -H                 # List and descriptions of configuration !elements
wfdriver/wfdriver.py -E ELEMENT         # Help on a specific element
}}}


<p align="right"><img src="http://wfrog.googlecode.com/svn/wiki/images/small-frog.png"/></p>